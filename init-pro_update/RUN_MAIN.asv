%% Run this first (currently the same as test.m)
% TODO: characterize space where satellites crash
%       generalize code for N satellites
%       tabulate deltav values
%       play with find_pros conditions
%       add one for min_dist
% relies on random_sat_start, find_pros, exppA_state, propagate_pro
% minDV, and plot_planar_pro.m

% Reset workspace
clear all;
clc;
close all;

%% Known constants
mhu = 398600; %Gravitational constant of Earth in km^3/s^2
Re = 6378; % Radius of Earth  in km

% User edited variables
N = 10000;                      % Number of satellites
center = [0,0,0];           % Location of chief (m)
mind = 15;                  % min distance from center (m)
maxd = 40;                 % max distance from center (m)
minv = 0.5;                % min injection velocity (m/s)
maxv =  2;               % max injection velocity (m/s)
radial_velocity_switch = 1; % 1 - only radial velocity, 0 - random
ca = 400;                   % Chief orbit altitude (km)
pro_max = 200;              % finding pro constraints max distance (m)
pro_min = 50;               % min distance contraint (m)
orbit_chief = 2;            % Switch orbit_chief - 1, yes; 0, no; 2, forces PRO 50<r<200
plot_tag = 0;               % Makes plot for first iteration - 1, plot; 0, no plot


% Stored in a state vector;
% Nx6 [x y z vx vy vz] form
% 0 - random vector between vmin and vmax
% 1 - radially outward from cygnus
% output - [x,y,z,xdot,ydot,zdot]; (m,m,m,m/s,m/s,m/s)
state_ejec = generate_random_sats(center, N, mind, maxd, minv, maxv,radial_velocity_switch);

% write distance to console
% xyz = state_ejec(1:3);
% vxyz = state_ejec(4:6);
% disp('Distance: ');
% disp(norm(xyz));
% disp('Velocity: ');
% disp(norm(vxyz));

% chief s/c value
a_chief = Re + ca; %semi-major axis of the orbit of the chief - km
period = 2*pi*sqrt(a_chief^3/mhu); %period of the chief orbit in seconds
n = 2*pi/period; % Mean motion in radians/second
%% AIMED PRO constraints
statePRO = zeros(N, 556, 6);
deltavs = zeros(N, 1);
i = 1;
miss = 0;
if plot_tag
    % Plots ejection orbits
    figure(1);
    title('Relative coordinate');
    xlabel('x');
    ylabel('y');
    zlabel('z');
    grid on;
    hold on;
    % legend()
end
while i <= N
    % Call function to calculate the possible PRO injection points
    if N == 1
        [state_potential,states] = find_pros(state_ejec, pro_max, pro_min, n, orbit_chief, period);
    else
        [state_potential,states] = find_pros(state_ejec(i,:), pro_max, pro_min, n, orbit_chief, period);
    end

    %% Get best PRO and plot it
    % Use I(time index when injecting would give minimum velocity
    % set that to be the initial state of the new PRO
    try
        [mindv,I] = minDV(state_potential, n);
        % disp("Min delta v (m/s): "+mindv);
        deltavs(i) = mindv;
        location = state_potential(I,1:3); %fixing the location from the previous section
        [statePRO1,~] = propagate_pro(location, n, period);
        statePRO(i,:,:) = statePRO1;
        
        total_v(i,:) = state_ejec(i,4:6);
        i = i + 1;
        if mod(i,100) == 0
            disp(i);
        end
        if plot_tag
            plot3(states(:,1), states(:,2), states(:,3),'DisplayName',"Ejection orbit "+(i-1));
            plot3(state_potential(:,1), state_potential(:,2), state_potential(:,3),'rs', 'DisplayName',"Potential candidates for firing");
        end
    catch
        % disp('Cannot plot nonexistant PRO');
        miss = miss + 1;
        % Get the launch velocity for misses
        miss_v(miss,:) = state_ejec(i,4:6);
        % Get the position of state checked for misses
        miss_r(miss,:) = state_ejec(i,1:3);
        % Get the distances of the missed sat IC
        miss_dist(miss,1) = norm(state_ejec(i,1:3));
        state_ejec(i,:) = generate_random_sats(center, 1, mind, maxd, minv, maxv,radial_velocity_switch);
    end
end
%%
PRO_stats(deltavs, statePRO, N, period, miss, miss_v,miss_r, total_v);

%% Generates a table of characteristics (dist vs vel) for missed ejections

miss_mag_vel = zeros(miss,1);
for index = 1:miss
    miss_mag_vel(index) = norm(miss_v(index,:));
end

% Then we have the distances (miss_dist) and
% the velocities (miss_mag_vel) for the missed locations
diffr = (maxd-mind)/5;
distranges = [mind, mind + diffr, mind+2*diffr, mind+3*diffr, mind+4*diffr, maxd+1];
diffv = (maxv - minv)/3;
vranges = [minv, minv + diffv,minv + 2*diffv, maxv+1];
%[bincounts,ind] = histc(miss_dist,binranges);

values = zeros(3,5);
for i = 1:3
    for j = 1:5
        for index = 1:miss
        end
    end
end

%%
figure;
subplot(1,2,1);
hist3([miss_dist,miss_mag_vel],[50,30]);
subplot(1,2,2);
counts = hist3([miss_dist,miss_mag_vel],[50,30]);
imshow(counts,[]);
colormap(hot(256));
colorbar;



%% Sets up plot
if plot_tag
    for i = 1:N
        plot3(state_ejec(i,1), state_ejec(i,2), state_ejec(i,3), 'g*', 'DisplayName',"Ejection Location "+i);
        plot3(statePRO1(1,1), statePRO1(1,2), statePRO1(1,3), 'k*','DisplayName', "Firing Position "+i);
    end
    % Draw 10m sphere to be cygnus
    radius = 10;
    [X,Y,Z] = sphere();
    surf(X*radius, Y*radius, Z*radius, 'DisplayName', 'Cygnus')
    axis equal
    
    make_animation(1);
    
    figure(2);
    title('Relative coordinate');
    xlabel('x');
    ylabel('y');
    zlabel('z');
    hold on;
    grid on;
    legend();
    for i = 1:N
        plot3(statePRO(i,:,1), statePRO(i,:,2), statePRO(i,:,3), '--','DisplayName', "Optimal PRO "+i);
    end
    % Draw 10m sphere to be cygnus
    radius = 10;
    [X,Y,Z] = sphere();
    surf(X*radius, Y*radius, Z*radius, 'DisplayName', 'Cygnus')
    axis equal

    make_animation(2);
    
    plot_planar_pro(statePRO, N);
end


function [] = make_animation(num)
az = 0;
el = 90;
view([az,el])

degStep = 2.5;
detlaT = 0.1;
fCount = 71;
f = getframe(gcf);
[im,map] = rgb2ind(f.cdata,256,'nodither');
im(1,1,1,fCount) = 0;
k = 1;
% spin 45°
for i = 0:-degStep:-45
  az = i;
  ([az,el])
  f = getframe(gcf);
  im(:,:,1,k) = rgb2ind(f.cdata,map,'nodither');
  k = k + 1;
end
% tilt down
for i = 90:-degStep:15
  el = i;
  view([az,el])
  f = getframe(gcf);
  im(:,:,1,k) = rgb2ind(f.cdata,map,'nodither');
  k = k + 1;
end
% spin left
for i = az:-degStep:-90
  az = i;
  view([az,el])
  f = getframe(gcf);
  im(:,:,1,k) = rgb2ind(f.cdata,map,'nodither');
  k = k + 1;
end
% spin right
for i = az:degStep:0
  az = i;
  view([az,el])
  f = getframe(gcf);
  im(:,:,1,k) = rgb2ind(f.cdata,map,'nodither');
  k = k + 1;
end
% tilt up to original
for i = el:degStep:90
  el = i;
  view([az,el])
  f = getframe(gcf);
  im(:,:,1,k) = rgb2ind(f.cdata,map,'nodither');
  k = k + 1;
end
imwrite(im,map,"plot"+num+".gif",'DelayTime',detlaT,'LoopCount',inf)
end

